from aiogram import F, Router, types, Bot
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart, Command

from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

import app.keyboards as kb
import app.database.requests as rq

from app.database.requests import send_something_new

router = Router()
bot = Bot(token='6988960612:AAHzHP4MU3oLDcygDMbYjkCvXIZQGRtHyLw')
# @router.message()
# async def save_message(message: Message):# —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–≤—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ñ–∞–∫—Ç—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#     time = message.date.now()
#     username = message.from_user.username
#     tg_id = message.from_user.id
#     fact = message.text
#     await rq.save_something_new(tg_id=tg_id, fact=fact, username=username, time=time)
#     await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!")


# —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã start
class Registration(StatesGroup):
    user_first_name = State()
    user_last_name = State()
    extended_information = State()


@router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    # await message.answer("–ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –æ—á–µ—Ä–µ–¥—å, –æ—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:",
    #                      reply_markup=types.ReplyKeyboardRemove()) #–ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å
    # await message.answer("–ò–æ—Å—å–∫–æ –ú–∏—Ö–∞–∏–ª	3	0")
    # await message.answer("–ù—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–µ—Å—å —Å–ø–∏—Å–æ–∫ —Ü–µ–ª–∏–∫–æ–º –∏ –ø—Ä–µ–¥–µ—Ä–∂–∏–≤–∞—Ç—å—Å—è —à–∞–±–ª–æ–Ω–∞: –ø—Ä–µ–≤—ã–µ 2 —Å–ª–æ–≤–∞ –¥–æ–ª–∂–Ω—ã —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ñ–∞–º–∏–ª–∏—é –∏ –∏–º—è, –ø–æ—Ç–æ–º –∏–¥—ë—Ç –Ω–æ–º–µ—Ä —Ç–µ–∫—É—â–µ–π –ª–∞–±—ã –∏ –±—É–ª–µ–≤–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è, –∫–æ—Ç–æ—Ä–∞—è –æ—Ç—Ä–∞–∂–∞–µ—Ç –∂–µ–ª–∞–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞ —Å–¥–∞–≤–∞—Ç—å –ª–∞–±—É –Ω–∞ –∑–∞–Ω—è—Ç–∏–∏")
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –≤ –≥—Ä—É–ø–ø–µ")
    await rq.set_user(message.from_user.id)
    await state.set_state(Registration.user_first_name)


@router.message(Registration.user_first_name)
async def process_first_name(message: Message, state: FSMContext):
    await state.update_data(user_first_name=message.text)
    await state.set_state(Registration.user_last_name)  # –°–º–µ—Å—Ç–∏—Ç—å –≤ –¥—Ä—É–≥—É—é —Ñ—É–Ω–∫—Ü–∏—é
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ, –∫—Ç–æ –∑–∞—â–∏—â–∞–ª –ª–∞–±—É')  # –ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å


@router.message(Registration.user_last_name)
async def process_last_name(message: Message, state: FSMContext):
    await state.update_data(user_last_name=message.text)
    await state.set_state(Registration.extended_information)
    await message.answer('–°–∫–∏–¥—ã–≤–∞–π —Ç–∞–±–ª–∏—Ü—É')


@router.message(Registration.extended_information)
async def extended_information(message: Message, state: FSMContext):
    await state.update_data(extended_information=message.text)

    data = await state.get_data()

    # const –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    col_columns = 4
    number_surname = 0
    number_name = 1
    number_laba = 2
    number_want = 3

    # –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–ª—è —Ä–∞—Å—á—ë—Ç–æ–≤
    list = []
    col_student = int(data['user_first_name'])
    was_the_last_person_to_respond = int(data['user_last_name'])

    # –≤–≤–≤–æ–¥ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤

    for i in range(0, col_student):
        list.append([])
        tmp = str(data['extended_information']).split()
        list[i].append(tmp[i * col_columns + number_surname])
        list[i].append(tmp[i * col_columns + number_name])
        list[i].append(int(tmp[i * col_columns + number_laba]))
        list[i].append(int(tmp[i * col_columns + number_want]))
    print("Success! all saved")

    # –≤—ã—â–∏—Ç—ã–≤–∞–Ω–∏–µ —Å—Ä–µ–¥–Ω–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ª–∞–±
    average_number_of_labs = 0
    for i in range(0, col_student):
        average_number_of_labs += list[i][number_laba]
    average_number_of_labs /= col_student
    print("Average number of labs: ", average_number_of_labs)

    # –∞–ª–≥–æ—Ä–∏—Ç–º –¥–ª—è –∫–æ–Ω–µ—á–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
    mas_rez = []
    for i in range(0, col_student):
        if list[i][number_laba] < average_number_of_labs - 2 and list[i][number_want] == 1:
            mas_rez.append(list[i])

    for i in range(0, col_student):
        number_for_check = (i + was_the_last_person_to_respond) % (col_student - 1)
        if (list[number_for_check][number_laba] >= average_number_of_labs - 2
                and list[i][number_want] == 1):
            mas_rez.append(list[number_for_check])

    for i in range(0, len(mas_rez)):
        print(f"{i+1}. {mas_rez[i][number_surname]} {mas_rez[i][number_name]} {mas_rez[i][number_laba]}")

    for i in range(0, len(mas_rez)):
        await message.answer(f"{i+1}. {mas_rez[i][number_surname]} {mas_rez[i][number_name]} {mas_rez[i][number_laba]}")
    await state.clear()
    await message.answer('–ï—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –æ—á–µ—Ä–µ–¥—å, –ø–∏—à–∏ "/start"üòâ ', reply_markup=kb.main)
    # await rq.update_money()

@router.message(F.text == '–°–æ–∑–¥–∞—Ç—å –æ—á–µ—Ä–µ–¥—å')
async def cmd_start(message: Message, state: FSMContext):
    # await message.answer("–ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –æ—á–µ—Ä–µ–¥—å, –æ—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:",
    #                      reply_markup=types.ReplyKeyboardRemove()) #–ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å
    # await message.answer("–ò–æ—Å—å–∫–æ –ú–∏—Ö–∞–∏–ª	3	0")
    # await message.answer("–ù—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–µ—Å—å —Å–ø–∏—Å–æ–∫ —Ü–µ–ª–∏–∫–æ–º –∏ –ø—Ä–µ–¥–µ—Ä–∂–∏–≤–∞—Ç—å—Å—è —à–∞–±–ª–æ–Ω–∞: –ø—Ä–µ–≤—ã–µ 2 —Å–ª–æ–≤–∞ –¥–æ–ª–∂–Ω—ã —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ñ–∞–º–∏–ª–∏—é –∏ –∏–º—è, –ø–æ—Ç–æ–º –∏–¥—ë—Ç –Ω–æ–º–µ—Ä —Ç–µ–∫—É—â–µ–π –ª–∞–±—ã –∏ –±—É–ª–µ–≤–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è, –∫–æ—Ç–æ—Ä–∞—è –æ—Ç—Ä–∞–∂–∞–µ—Ç –∂–µ–ª–∞–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞ —Å–¥–∞–≤–∞—Ç—å –ª–∞–±—É –Ω–∞ –∑–∞–Ω—è—Ç–∏–∏")
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –≤ –≥—Ä—É–ø–ø–µ")
    await rq.set_user(message.from_user.id)
    await state.set_state(Registration.user_first_name)


@router.message(Registration.user_first_name)
async def process_first_name(message: Message, state: FSMContext):
    await state.update_data(user_first_name=message.text)
    await state.set_state(Registration.user_last_name)  # –°–º–µ—Å—Ç–∏—Ç—å –≤ –¥—Ä—É–≥—É—é —Ñ—É–Ω–∫—Ü–∏—é
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ, –∫—Ç–æ –∑–∞—â–∏—â–∞–ª –ª–∞–±—É')  # –ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å


@router.message(Registration.user_last_name)
async def process_last_name(message: Message, state: FSMContext):
    await state.update_data(user_last_name=message.text)
    await state.set_state(Registration.extended_information)
    await message.answer('–°–∫–∏–¥—ã–≤–∞–π —Ç–∞–±–ª–∏—Ü—É')


@router.message(Registration.extended_information)
async def extended_information(message: Message, state: FSMContext):
    await state.update_data(extended_information=message.text)

    data = await state.get_data()

    # const –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    col_columns = 4
    number_surname = 0
    number_name = 1
    number_laba = 2
    number_want = 3

    # –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–ª—è —Ä–∞—Å—á—ë—Ç–æ–≤
    list = []
    col_student = int(data['user_first_name'])
    was_the_last_person_to_respond = int(data['user_last_name'])

    # –≤–≤–≤–æ–¥ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤

    for i in range(0, col_student):
        list.append([])
        tmp = str(data['extended_information']).split()
        list[i].append(tmp[i * col_columns + number_surname])
        list[i].append(tmp[i * col_columns + number_name])
        list[i].append(int(tmp[i * col_columns + number_laba]))
        list[i].append(int(tmp[i * col_columns + number_want]))
    print("Success! all saved")

    # –≤—ã—â–∏—Ç—ã–≤–∞–Ω–∏–µ —Å—Ä–µ–¥–Ω–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ª–∞–±
    average_number_of_labs = 0
    for i in range(0, col_student):
        average_number_of_labs += list[i][number_laba]
    average_number_of_labs /= col_student
    print("Average number of labs: ", average_number_of_labs)

    # –∞–ª–≥–æ—Ä–∏—Ç–º –¥–ª—è –∫–æ–Ω–µ—á–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
    mas_rez = []
    for i in range(0, col_student):
        if list[i][number_laba] < average_number_of_labs - 2 and list[i][number_want] == 1:
            mas_rez.append(list[i])

    for i in range(0, col_student):
        number_for_check = (i + was_the_last_person_to_respond) % (col_student - 1)
        if (list[number_for_check][number_laba] >= average_number_of_labs - 2
                and list[i][number_want] == 1):
            mas_rez.append(list[number_for_check])

    for i in range(0, len(mas_rez)):
        print(f"{i+1}. {mas_rez[i][number_surname]} {mas_rez[i][number_name]} {mas_rez[i][number_laba]}")

    for i in range(0, len(mas_rez)):
        await message.answer(f"{i+1}. {mas_rez[i][number_surname]} {mas_rez[i][number_name]} {mas_rez[i][number_laba]}")
    await state.clear()
    await message.answer('–ï—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –æ—á–µ—Ä–µ–¥—å, –ø–∏—à–∏ "/start"üòâ ', reply_markup=kb.main)

# –ö–æ–Ω–µ—Ü —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

# # —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã start
# class Registration(StatesGroup):
#     user_first_name = State()
#     user_last_name = State()
#     extended_information = State()
#     phone_number = State()
#
#
# @router.message(CommandStart())
# async def cmd_start(message: Message, state: FSMContext):
#     await message.answer("–ü—Ä–∏–≤–µ—ÇüôÉ –Ø c–º–æ–≥—É —Ç–µ–±–µ —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –º–Ω–æ–∂–µ—Å—Ç–≤–æ –∑–∞–±–∞–≤–Ω—ã—Ö —Ñ–∞–∫—Ç–æ–≤ –∏–ª–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞—Ç—å –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–∑–¥–∞—Ç–µ–ª—é",
#                          reply_markup=types.ReplyKeyboardRemove()) #–ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å
#     await message.answer("–ù–æ –¥–ª—è –Ω–∞—á–∞–ª–∞ –¥–∞–≤–∞–π –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—èüòä")
#     await message.answer("–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
#     await rq.set_user(message.from_user.id)
#     await state.set_state(Registration.user_first_name)
#
#
# @router.message(Registration.user_first_name)
# async def process_first_name(message: Message, state: FSMContext):
#     await state.update_data(user_first_name=message.text)
#     await state.set_state(Registration.user_last_name)#–°–º–µ—Å—Ç–∏—Ç—å –≤ –¥—Ä—É–≥—É—é —Ñ—É–Ω–∫—Ü–∏—é
#     await message.answer('–ê –∫–∞–∫–∞—è —É —Ç–µ–±—è —Ñ–∞–º–∏–ª–∏—è?') #–ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å
#     await message.answer("üòÖ")
#
#
# @router.message(Registration.user_last_name)
# async def process_last_name(message: Message, state: FSMContext):
#     await state.update_data(user_last_name=message.text)
#     await state.set_state(Registration.extended_information)
#     await message.answer('–†–∞—Å—Å–∫–∞–∂–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å –æ —Å–µ–±–µ')
#
#
# @router.message(Registration.extended_information)
# async def extended_information(message: Message, state: FSMContext):
#     await state.update_data(extended_information=message.text)
#     await state.set_state(Registration.phone_number)
#     await message.answer('–ò –ø–æ—Å–ª–µ–¥–Ω–µ–µ: –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞', reply_markup=kb.get_number)
#
#
# @router.message(Registration.phone_number, F.contact)
# async def register_number(message: Message, state: FSMContext):
#     await state.update_data(phone_number=message.contact.phone_number)
#     data = await state.get_data()
#
#     contact = message.contact
#     tg_id = contact.user_id
#     phone_number = contact.phone_number
#     tg_user_first_name = contact.first_name
#     tg_user_last_name = contact.last_name
#     time = message.date.now()
#     username = message.from_user.username
#     await rq.save_user(tg_id=tg_id, tg_user_first_name=tg_user_first_name,
#                        user_first_name=data['user_first_name'], tg_user_last_name=tg_user_last_name,
#                        user_last_name=data['user_last_name'], phone_number=phone_number,
#                        extended_information=data['extended_information'], time=time,
#                        username=username)
#     await message.answer(f'–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—Å—è, {data['user_first_name']}, {data['user_last_name']}', reply_markup=kb.main)
#     await state.clear()
#     await message.answer('–ï—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å –≤–≤–µ–¥—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, —Ç–æ –º–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å "/start"üòâ')
#     # await rq.update_money()
# # –ö–æ–Ω–µ—Ü —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è





#–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ñ–∞–∫—Ç—ã –∏ –≥–ª—É–±–∂–µ
@router.message(F.text == '–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ñ–∞–∫—Ç—ã')
async def catalog(message: Message):
    await message.answer('–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å –±–æ–ª–µ–µ 200 –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –∏ –∑–∞–±–∞–≤–Ω—ã—Ö —Ñ–∞–∫—Ç–æ–≤ü§ò)', reply_markup=kb.interesting_facts)


@router.message(F.text == '–ß—Ç–æ-—Ç–æ –Ω–æ–≤–æ–µ')
async def catalog(message: Message):
    fact = await send_something_new()
    if fact:
        await message.answer('–õ–æ–≤–∏ –Ω–æ–≤—ã–π —Ñ–∞–∫—ÇüôÇ', reply_markup = types.ReplyKeyboardRemove())
        await message.answer(fact, reply_markup=kb.more_something_new)
    else:
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫.", reply_markup=kb.interesting_facts)

@router.callback_query(F.data == 'something_new')
async def catalog(callback: CallbackQuery):
    fact = await send_something_new()
    if fact:
        await callback.answer('')
        await callback.message.answer(fact, reply_markup=kb.more_something_new)
    else:
        await callback.answer('')
        await callback.message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫.", reply_markup=kb.interesting_facts)

@router.callback_query(F.data == 'back_to_interesting_facts')
async def to_main(callback: CallbackQuery):
    await callback.answer('')
    await callback.message.answer('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞–∑–∞–¥üò∂‚Äçüå´Ô∏è', reply_markup=kb.main)








class for_me(StatesGroup):
    user_message = State()

@router.message(F.text == '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞')
async def start_saving_for_creator(message: Message, state: FSMContext):
    await message.answer("–¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –æ—Ç–ø–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞", reply_markup=types.ReplyKeyboardRemove())
    await state.set_state(for_me.user_message)

@router.message(for_me.user_message)
async def saving_for_creator(message: Message, state: FSMContext):
    await state.update_data(user_message=message.text)
    data = await state.get_data()
    tg_id = message.from_user.id
    tg_user_first_name = message.from_user.first_name
    tg_user_last_name = message.from_user.last_name
    time = message.date.now()
    username = message.from_user.username
    await rq.save_user_message(tg_id=tg_id, tg_user_first_name=tg_user_first_name,
                        tg_user_last_name=tg_user_last_name, user_message=data['user_message'],
                        time=time, username=username)
    await state.clear()
    await message.answer('–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ', reply_markup=kb.main)











# anonymous message
class anonymous_for_me(StatesGroup):
    anonymous_user_message = State()

@router.message(F.text == '–ê–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ú–∏—à–µ')
async def start_anonymous_saving_for_creator(message: Message, state: FSMContext):
    await message.answer("–¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –æ—Ç–ø–∞–≤–∏—Ç—å –∞–Ω–æ–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ú–∏—à–µ", reply_markup=types.ReplyKeyboardRemove())
    await state.set_state(anonymous_for_me.anonymous_user_message)

@router.message(anonymous_for_me.anonymous_user_message)
async def anonymous_saving_for_creator(message: Message, state: FSMContext):
    await state.update_data(anonymous_user_message=message.text)
    data = await state.get_data()
    tg_id = message.from_user.id
    tg_user_first_name = message.from_user.first_name
    tg_user_last_name = message.from_user.last_name
    time = message.date.now()
    username = message.from_user.username
    await rq.anonymous_save_user_message(tg_id=tg_id, tg_user_first_name=tg_user_first_name,
                        tg_user_last_name=tg_user_last_name, anonymous_user_message=data['anonymous_user_message'],
                        time=time, username=username)
    await state.clear()
    await message.answer('–í–∞—à–µ –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ', reply_markup=kb.main)


@router.message(F.text == '–ù–∞ –≥–ª–∞–≤–Ω—É—é')
async def to_main(callback: CallbackQuery):
    await callback.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é ^_^', reply_markup=kb.main)

# @router.message(Command('help'))
# async def cmd_help(message: Message):
#     await message.answer('–í—ã –Ω–∞–∂–∞–ª–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ–º–æ—â–∏) –ß—Ç–æ —É –≤–∞—Å –ø—Ä–æ–∏–∑–æ—à–ª–æ?')


# @router.message(F.text == '–ö–∞—Ç–∞–ª–æ–≥')
# async def catalog(message: Message):
#     await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞',
#     reply_markup=await kb.categories())
#
#
# @router.callback_query(F.data.startswith('category_'))
# async def category(callback: CallbackQuery):
#     await callback.answer('–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é')
#     await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏',
#                                   reply_markup=await kb.items(callback.data.split('_')[1]))
#
#
# @router.callback_query(F.data.startswith('item_'))
# async def category(callback: CallbackQuery):
#     item_data = await rq.get_item(callback.data.split('_')[1])
#     await callback.answer('–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–æ–≤–∞—Ä')
#     await callback.message.answer(f'–ù–∞–∑–≤–∞–Ω–∏–µ: {item_data.name}\n–û–ø–∏—Å–∞–Ω–∏–µ: {item_data.description}\n–¶–µ–Ω–∞: {item_data.price}$')
